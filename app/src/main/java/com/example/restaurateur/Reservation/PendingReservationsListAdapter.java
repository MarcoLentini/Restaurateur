package com.example.restaurateur.Reservation;import android.content.Context;import android.content.Intent;import android.os.Bundle;import android.support.annotation.NonNull;import android.support.v4.app.Fragment;import android.support.v7.widget.RecyclerView;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.Button;import android.widget.TextView;import com.example.restaurateur.MainActivity;import com.example.restaurateur.Offer.OfferModel;import com.example.restaurateur.R;import com.google.firebase.firestore.FirebaseFirestore;import java.text.DecimalFormat;import java.util.ArrayList;import java.util.HashMap;public class PendingReservationsListAdapter extends RecyclerView.Adapter<PendingReservationsListAdapter.PendingReservationViewHolder> {    private ReservationsMainFragment mainFragment;    private MainActivity fragmentActivity;    private ArrayList<ReservationModel> pendingDataSet;    private LayoutInflater mInflater;    private FirebaseFirestore db;    private TabReservationsPending tabFrag;    public PendingReservationsListAdapter(Context context, ArrayList<ReservationModel> pendingData,                                          MainActivity fragmentActivity, TabReservationsPending tabFrag, ReservationsMainFragment mainFragment) {        this.mainFragment = mainFragment;        this.fragmentActivity = fragmentActivity;        this.mInflater = LayoutInflater.from(context);        this.pendingDataSet = pendingData;        this.tabFrag = tabFrag;        this.db = FirebaseFirestore.getInstance();    }    @NonNull    @Override    public PendingReservationViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {        View view = mInflater.inflate(R.layout.pending_reservation_cardview, parent, false);        PendingReservationViewHolder holder = new PendingReservationViewHolder(view);        view.setOnClickListener(v -> {            Intent myIntent = new Intent(mainFragment.getContext(), PendingDetailsActivity.class);            int itemPosition = holder.getAdapterPosition();            Bundle bn = new Bundle();            bn.putInt("reservationCardData", itemPosition);            myIntent.putExtras(bn);            mainFragment.startActivityForResult(myIntent, tabFrag.PENDING_REQ);        });        return holder;    }    @Override    public void onBindViewHolder(@NonNull PendingReservationViewHolder pendingReservationViewHolder, int position) {        TextView textViewOrderId = pendingReservationViewHolder.textViewReservationId;        TextView textViewTimestamp = pendingReservationViewHolder.textViewTimestamp;        TextView textViewTotalIncome = pendingReservationViewHolder.textViewTotalIncome;        TextView textViewOrderedFood = pendingReservationViewHolder.textViewOrderedDishes;        TextView textViewReservationNotes = pendingReservationViewHolder.textViewReservationNotes;        Button btnAcceptReservation = pendingReservationViewHolder.btnAcceptReservation;        Button btnRejectReservation = pendingReservationViewHolder.btnRejectReservation;        ReservationModel tmpRM = pendingDataSet.get(position);        textViewOrderId.setText(String.valueOf(tmpRM.getRs_id()));        textViewTimestamp.setText(String.valueOf(tmpRM.getTimestamp()));        DecimalFormat format = new DecimalFormat("0.00");        String formattedIncome = format.format(tmpRM.getTotal_income());        textViewTotalIncome.setText(formattedIncome);        String reservationOffer = "";        for (int i = 0; i < tmpRM.getDishesArrayList().size(); i++) {            String offerName = "â–¶" + tmpRM.getDishesArrayList().get(i).getDishName();            reservationOffer += offerName + "(" + tmpRM.getDishesArrayList().get(i).getDishQty() + ")  ";        }        textViewOrderedFood.setText(reservationOffer);        if(!tmpRM.getNotes().equals(""))            textViewReservationNotes.setVisibility(View.VISIBLE);        btnAcceptReservation.setOnClickListener(v -> {            int pos = pendingReservationViewHolder.getAdapterPosition();            pendingAccept(pos);        });        btnRejectReservation.setOnClickListener(v -> {            int pos = pendingReservationViewHolder.getAdapterPosition();            pendingReject(pos);        });    }    public void pendingAccept(int pos){        ReservationModel tmpRM = pendingDataSet.get(pos);        db.collection("reservations").document(tmpRM.getReservation_id()).update("rs_status", ReservationState.STATE_IN_PROGRESS).addOnCompleteListener(task -> {            if(task.isSuccessful()){                fragmentActivity.removeItemFromPending(pos);//pendingDataSet.remove(pos);                notifyItemRemoved(pos);                notifyItemRangeChanged(pos, pendingDataSet.size());                tmpRM.setRs_status(ReservationState.STATE_IN_PROGRESS);                fragmentActivity.addItemToInProgress(tmpRM);//inProgressDataSet.add(tmpRM);                mainFragment.decrementPendingReservationsNumber();            }        });    }    public void pendingReject(int pos){        ReservationModel tmpRM = pendingDataSet.get(pos);        db.collection("reservations").document(tmpRM.getReservation_id()).update("rs_status", ReservationState.STATE_FINISHED_REJECTED).addOnCompleteListener(task -> {            if(task.isSuccessful()) {                fragmentActivity.removeItemFromPending(pos);//pendingDataSet.remove(pos);                notifyItemRemoved(pos);                notifyItemRangeChanged(pos, pendingDataSet.size());                tmpRM.setRs_status(ReservationState.STATE_FINISHED_REJECTED);                fragmentActivity.addItemToFinished(tmpRM);//finishedDataSet.add(tmpRM);                mainFragment.decrementPendingReservationsNumber();            }        });    }    @Override    public int getItemCount() {        return pendingDataSet.size();    }   static class PendingReservationViewHolder extends RecyclerView.ViewHolder {        TextView textViewReservationId;        TextView textViewTimestamp; // TODO valutare se serve il timestamp nel card        TextView textViewTotalIncome;        TextView textViewOrderedDishes;        TextView textViewReservationNotes;        Button btnAcceptReservation;        Button btnRejectReservation;        PendingReservationViewHolder(View itemView) {            super(itemView);            this.textViewReservationId = itemView.findViewById(R.id.textViewOrderIdReservationPending);            this.textViewTimestamp = itemView.findViewById(R.id.textViewRemainingTimeReservationPending);            this.textViewTotalIncome = itemView.findViewById(R.id.textViewTotalIncomeReservationPending);            this.textViewOrderedDishes = itemView.findViewById(R.id.textViewFoodReservationPending);            this.textViewReservationNotes = itemView.findViewById(R.id.textViewStateReservationPending);            btnAcceptReservation = itemView.findViewById(R.id.buttonResumeReservationPending);            btnRejectReservation = itemView.findViewById(R.id.buttonRemoveReservationPending);        }    }}